[
  {
    "path": "posts/2020-01-20-animating-plots-in-r/",
    "title": "Animating Plots in R",
    "description": "Using Plotly to animate plots in R.",
    "author": [
      {
        "name": "Matthew Harris",
        "url": {}
      }
    ],
    "date": "2020-01-20",
    "categories": [],
    "contents": "\n\nContents\nGoals\nPackages\nData Import\nData Transformation\nStatic plot\nCreating the animated plot!!!\n\nGoals\nAnimated visualization can be great for communicating changes over time that might be harder to interpret from static plots. My goal is to calculate the per year podium counts for each of the top ten constructors. I then want to create a plot in Plotly that will allow me animate the change in podiums over time.\nPackages\nFirst we need to the packages need for this analysis.\n\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(scales)\nlibrary(plotly)\nlibrary(ggsci)\nlibrary(here)\n\n\n\nData Import\nThe data used for this analysis can be found at the following link. \nFormula One Data\nData Transformation\nBefore I can create the animated plot I need to transform the data into a format that will be easier to work with.\n\n\nf1_data %>%\n  #Groups by constructor name\n  group_by(c_name) %>%\n  #Calculates the total podiums by constructor\n  summarize(total_p = sum(podium)) %>%\n  #Filters olnly for the top 10 constructors \n  #by total podiums\n  top_n(10, total_p) %>%\n  #Pulls the constructor name column out as a vector\n  pull(c_name) -> top_10_const\n\n\n\nWith the top ten constructors identified, I can compute the additional value needed for the animated plot: the cumulative podium wins per year.\n\n\nf1_data %>%\n  #Filters by the top constructors identified \n  #from the previous step\n  filter(c_name %in% top_10_const) %>%\n  #Groups by the race year and contructor name\n  group_by(race_year, c_name) %>%\n  #Calculates the total podiums per year for \n  #each constructor\n  summarize(annual_podium = sum(podium)) %>%\n  ungroup() %>%\n  #Sort the data by race year to ensure that the\n  #cumulative calculations work correctly\n  arrange(race_year) %>%\n  #Pivots the data into a wide format so that each \n  #constructor with their annual podium count is in a \n  #seperate column\n  pivot_wider(names_from = c_name, \n              values_from = annual_podium) %>%\n  #Replaces NA values with 0. This will ensure that the\n  #cumulative podium calculation doesn't skip years where\n  #there isn't data\n  map_df(~if_else(is.na(.x), 0, .x)) %>%\n  #Pivots the data back to the long format\n  pivot_longer(cols = c(2:ncol(.)), \n               names_to = \"c_name\", \n               values_to = \"annual_podium\") %>%\n  #Nest the data by constructor name\n  group_by(c_name) %>%\n  nest() %>%\n  #Calculates the cumulative podium count for each year\n  #for each consrtuctor\n  mutate(cum_podiums = map(data, \n                            ~cumsum(.x$annual_podium))) %>%\n  unnest(c(data, cum_podiums)) %>%\n  #Drops the annual podium column\n  ungroup() %>%\n  select(-annual_podium) -> const_top_10\n\nconst_top_10 %>%\n  head()\n\n\n# A tibble: 6 x 3\n  c_name  race_year cum_podiums\n  <chr>       <dbl>       <dbl>\n1 Ferrari      1950           3\n2 Ferrari      1951          16\n3 Ferrari      1952          33\n4 Ferrari      1953          49\n5 Ferrari      1954          63\n6 Ferrari      1955          72\n\nStatic plot\nFor comparison I have utilized our new values to visualize the podium performance with a static plot. In order to communicate the same information I’ve chosen to facet the plots by year. Since there are so many years to facet the plot becomes noisy and difficult to interpret. Now lets see how the animated plot performs.\n\n\nconst_top_10 %>%\n  ggplot(aes(c_name, cum_podiums, fill = c_name)) + \n  geom_col() + facet_wrap(~race_year) + \n  theme(axis.text.x = element_text(angle = 45)) +\n  scale_fill_npg() + labs(x = \"Top 10 Constructors\",\n                          y = \"Total Podiums\",\n                          fill = \"\")\n\n\n\n\nCreating the animated plot!!!\nThe animated plot is fairly easy to create. I just need to supply the race_year column to the frame parameter. This will allow anyone to use the slider to move through time and see how podiums counts have changed for each constructor. It’s also way easier to compare the performance of each constructor and identify trends.\n\n\nplot_ly(const_top_10,\n        x = ~c_name,\n        y = ~cum_podiums,\n        color = ~c_name,\n        colors = my_pal,\n        type = \"bar\",\n        frame = ~race_year) %>% \n  layout(yaxis = list(title = \"Total Podiums\"),\n         xaxis = list(title = \"Top 10 Constructors\")) %>%\n  animation_slider(currentvalue = list(prefix = \"Year \"))\n\n\npreserve5c9f12c7847261cc\n\n\n\n\n",
    "preview": "posts/2020-01-20-animating-plots-in-r/plot-preview.png",
    "last_modified": "2021-02-10T12:55:26-05:00",
    "input_file": "animating-plots-in-r.utf8.md",
    "preview_width": 700,
    "preview_height": 450
  },
  {
    "path": "posts/2021-02-10-welcome-to-matthew-harris/",
    "title": "Welcome",
    "description": "Welcome to my blog!",
    "author": [
      {
        "name": "Matthew Harris",
        "url": {}
      }
    ],
    "date": "2020-01-01",
    "categories": [],
    "contents": "\nThanks for checking out my project/blog site! This site will be used to post various tips on conducting data analysis with R and Python.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-02-10T10:51:33-05:00",
    "input_file": {}
  }
]
